<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <title>لوحة التحكم</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { background-color: #f8f9fa; }
        .main-container { min-height: 85vh; }
        .chat-container { height: 75vh; }
        .conversations-list { background-color: #fff; border-left: 1px solid #dee2e6; overflow-y: auto; }
        .list-group-item { border-radius: 0 !important; border-left: 0; border-right: 0; }
        .list-group-item.active { z-index: 2; color: #fff; background-color: #0d6efd; border-color: #0d6efd; }
        .messages-area { display: flex; flex-direction: column-reverse; overflow-y: auto; }
        .message-bubble { max-width: 70%; padding: 10px 15px; border-radius: 18px; margin-bottom: 10px; line-height: 1.4; }
        .customer-message { background-color: #e9ecef; color: #000; align-self: flex-start; }
        .agent-message { background-color: #0d6efd; color: white; align-self: flex-end; }
    </style>
</head>
<body>
    <div class="container-fluid p-4">
        <h1 class="mb-4">لوحة تحكم واتساب - <%= company.companyName %></h1>

        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="chat-tab" data-bs-toggle="tab" data-bs-target="#chat-pane" type="button" role="tab">الدردشة</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="settings-tab" data-bs-toggle="tab" data-bs-target="#settings-pane" type="button" role="tab">الإعدادات</button>
            </li>
        </ul>

        <div class="tab-content main-container border border-top-0 rounded-bottom bg-white shadow-sm" id="myTabContent">
            
            <div class="tab-pane fade show active" id="chat-pane" role="tabpanel">
                <div class="row g-0 chat-container">
                    <div class="col-md-4 conversations-list p-0">
                        <div class="list-group" id="conv-list"></div>
                    </div>
                    <div class="col-md-8 d-flex flex-column p-0">
                        <div class="messages-area p-3 flex-grow-1">
                            <div class="d-flex h-100 justify-content-center align-items-center"><h4 class="text-muted">اختر محادثة</h4></div>
                        </div>
                        <div class="reply-area p-3 bg-light border-top">
                            <form id="replyForm" class="d-none"><input type="text" id="replyMessage" class="form-control" placeholder="اكتب ردك..." autocomplete="off"><button type="submit" class="btn btn-primary ms-2">إرسال</button></form>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane fade" id="settings-pane" role="tabpanel">
                <div class="p-4">
                    <h2>إعدادات ربط واتساب</h2>
                    <form id="settingsForm">
                        <div class="mb-3">
                            <label for="accessToken" class="form-label">Access Token:</label>
                            <input type="text" class="form-control" id="accessToken" value="<%= company.whatsapp && company.whatsapp.accessToken ? company.whatsapp.accessToken : '' %>" required>
                        </div>
                        <div class="mb-3">
                            <label for="phoneNumberId" class="form-label">Phone Number ID:</label>
                            <input type="text" class="form-control" id="phoneNumberId" value="<%= company.whatsapp && company.whatsapp.phoneNumberId ? company.whatsapp.phoneNumberId : '' %>" required>
                        </div>
                        <div class="mb-3">
                            <label for="verifyToken" class="form-label">Verify Token:</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="verifyToken" value="<%= company.whatsapp && company.whatsapp.verifyToken ? company.whatsapp.verifyToken : '' %>" required>
                                <button class="btn btn-outline-secondary" type="button" id="generateTokenBtn">إنشاء</button>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-success">حفظ الإعدادات</button>
                        <p class="mt-3" id="formMessage"></p>
                    </form>
                    <hr>
                    <div class="webhook-section">
                        <h3>رابط الـ Webhook الفريد الخاص بك</h3>
                        <p class="text-muted">انسخ هذا الرابط والصقه في حقل "Callback URL" في إعدادات تطبيقك على ميتا.</p>
                        <input type='text' class="form-control" value='<%= webhookUrl %>' readonly>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
<script>
    // Element selectors
    const convListDiv = document.getElementById('conv-list');
    const messagesArea = document.querySelector('.messages-area');
    const replyForm = document.getElementById('replyForm');
    const replyMessageInput = document.getElementById('replyMessage');
    const settingsForm = document.getElementById('settingsForm');
    const generateTokenBtn = document.getElementById('generateTokenBtn');
    const socket = io();
    let activeConversationId = null;

    // --- Helper function to add a message bubble ---
    function appendMessage(msg) {
        const placeholder = messagesArea.querySelector('.d-flex');
        if (placeholder) placeholder.innerHTML = '';
        const msgBubble = document.createElement('div');
        msgBubble.className = 'message-bubble';
        msgBubble.dataset.messageId = msg._id;
        if (msg.messageType === 'image') {
            msgBubble.innerHTML = `<a href="${msg.content}" target="_blank"><img src="${msg.content}" style="max-width: 200px; border-radius: 8px; cursor: pointer;"></a>`;
        } else {
            let contentHTML = msg.content;
            if (msg.sender === 'agent') {
                const statusTicks = `<span class="status-ticks" data-status="${msg.status}">✓</span>`;
                contentHTML += ` <span class="message-meta">${statusTicks}</span>`;
            }
            msgBubble.innerHTML = contentHTML;
        }
        msgBubble.classList.add(msg.sender === 'customer' ? 'customer-message' : 'agent-message');
        messagesArea.prepend(msgBubble);
    }

    // --- Function to load messages for a conversation ---
    async function loadMessages(conversationId, convElement) {
        if (activeConversationId === conversationId) return;
        activeConversationId = conversationId;
        document.querySelectorAll('.list-group-item').forEach(el => el.classList.remove('active'));
        convElement.classList.add('active');
        messagesArea.innerHTML = '<p class="text-center text-muted">Loading...</p>';
        const response = await fetch(`/api/conversations/${conversationId}/messages`);
        const messages = await response.json();
        messagesArea.innerHTML = '';
        if (messages.length === 0) {
            messagesArea.innerHTML = '<div class="d-flex h-100 justify-content-center align-items-center"><h4 class="text-muted">No messages</h4></div>';
        } else {
            messages.forEach(msg => appendMessage(msg));
        }
        replyForm.classList.remove('d-none');
    }

    // --- Function to load the conversation list ---
    async function loadConversations() {
        try {
            const response = await fetch('/api/conversations');
            if (!response.ok) return;
            const conversations = await response.json();
            convListDiv.innerHTML = '';
            conversations.forEach(conv => {
                const convItem = document.createElement('a');
                convItem.href = '#';
                convItem.className = 'list-group-item list-group-item-action';
                convItem.dataset.id = conv._id;
                convItem.innerHTML = `<div class="d-flex w-100 justify-content-between"><h5 class="mb-1">${conv.customerName || 'Unknown'}</h5></div><p class="mb-1">${conv.customerPhone}</p>`;
                convItem.addEventListener('click', (e) => {
                    e.preventDefault();
                    loadMessages(conv._id, convItem);
                });
                convListDiv.appendChild(convItem);
            });
        } catch (error) {
            console.error("Failed to load conversations:", error);
        }
    }

    // --- EVENT LISTENERS ---

    // Listener for the Save Settings form
    settingsForm.addEventListener('submit', async function(e) {
        e.preventDefault(); // Prevent page refresh
        const messageEl = document.getElementById('formMessage');
        messageEl.textContent = 'Saving...';
        const accessToken = document.getElementById('accessToken').value;
        const phoneNumberId = document.getElementById('phoneNumberId').value;
        const verifyToken = document.getElementById('verifyToken').value;
        try {
            const response = await fetch('/api/settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ accessToken, phoneNumberId, verifyToken })
            });
            const data = await response.json();
            messageEl.textContent = data.message;
            messageEl.style.color = response.ok ? 'green' : 'red';
        } catch (error) {
            messageEl.textContent = 'Failed to connect to server.';
            messageEl.style.color = 'red';
        }
    });

    // Listener for the Reply form
    replyForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const messageText = replyMessageInput.value;
        if (!messageText.trim() || !activeConversationId) return;
        try {
            const response = await fetch(`/api/conversations/${activeConversationId}/reply`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: messageText })
            });
            const data = await response.json();
            if (response.ok) {
                appendMessage(data);
                replyMessageInput.value = '';
                replyMessageInput.focus();
            } else {
                if (response.status === 401 && data.redirectTo) {
                    alert(data.message);
                    window.location.href = data.redirectTo;
                } else {
                    alert('Failed to send reply: ' + data.message);
                }
            }
        } catch (error) {
            alert('An unexpected error occurred.');
        }
    });

    // Listener for the Generate Token button
    generateTokenBtn.addEventListener('click', function() {
        const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        document.getElementById('verifyToken').value = randomString;
    });

    // --- SOCKET.IO LISTENERS ---
    socket.on('new_message', (message) => {
        if (message.conversationId === activeConversationId) {
            appendMessage(message);
        }
        loadConversations();
    });

    socket.on('message_status_update', (data) => {
        const messageBubble = document.querySelector(`.message-bubble[data-message-id="${data.messageId}"]`);
        if (messageBubble) {
            const statusTicks = messageBubble.querySelector('.status-ticks');
            if (statusTicks) {
                statusTicks.dataset.status = data.status;
            }
        }
    });

    // --- INITIAL PAGE LOAD ---
    window.addEventListener('load', loadConversations);
</script>

</body>
</html>